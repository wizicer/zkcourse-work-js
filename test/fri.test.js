import { buildBn128, BigBuffer, utils, Scalar } from "ffjavascript";
import { assert, expect } from "chai";
import * as galois from "@guildofweavers/galois";
// import Polynomial from "polynomial";
import Polynomial from "../lib/polynomial/polynomial.js";
import { secp256k1 } from "@noble/curves/secp256k1";
import EC from "elliptic";
import BN from "bn.js";
import { MerkleTree } from "merkletreejs";
import SHA256 from "crypto-js/sha256.js";

let log2 = utils.log2;
BigInt.prototype.toJSON = function () {
  return this.toString();
};
const PrecomputedPolynomial =
  "763535180x^1022+2953734559x^1021+2698741152x^1020+54098756x^1019+2788213538x^1018+1155670422x^1017+624616355x^1016+1230220650x^1015+3031370424x^1014+1435006670x^1013+1348599612x^1012+2747653392x^1011+2391522000x^1010+1532076140x^1009+928299345x^1008+406142696x^1007+2295522408x^1006+172462311x^1005+1761175514x^1004+2672236573x^1003+2797028516x^1002+1598484342x^1001+698585313x^1000+1011944621x^999+1735681393x^998+2344132794x^997+2600542954x^996+2448103956x^995+145200136x^994+2367475398x^993+2660164613x^992+112633116x^991+2493527243x^990+48178635x^989+1670818442x^988+1134611247x^987+2876372092x^986+1809483589x^985+1466095103x^984+629829498x^983+1908615229x^982+2380058446x^981+2652446578x^980+1627030925x^979+1056472000x^978+1776159787x^977+3094379747x^976+53809198x^975+682704628x^974+547848925x^973+2764116119x^972+1209969545x^971+2800348169x^970+769949458x^969+3043211581x^968+297325109x^967+201046882x^966+2238420231x^965+858104209x^964+212655357x^963+1215862452x^962+59872740x^961+469948711x^960+1732924650x^959+332395339x^958+3196994949x^957+1197613017x^956+1085003378x^955+2295297062x^954+1268120707x^953+3086388710x^952+1340488431x^951+3094558470x^950+3182900063x^949+1083096761x^948+1021022741x^947+1022466975x^946+103274661x^945+1718764898x^944+1805755298x^943+2073967267x^942+2106964031x^941+2812990823x^940+2142422668x^939+304063246x^938+2886656868x^937+649429281x^936+492702754x^935+2400915015x^934+2855943519x^933+2239210343x^932+1830619306x^931+2806015484x^930+770380453x^929+1833172752x^928+1384098939x^927+3078499757x^926+1718336127x^925+63006213x^924+1721770553x^923+1065019516x^922+318274395x^921+504828898x^920+1498914104x^919+1026104196x^918+1562102460x^917+40169096x^916+2011640807x^915+1302569287x^914+2330009575x^913+2212090684x^912+2392988485x^911+2596501011x^910+1507119213x^909+3049952347x^908+2107087418x^907+121895789x^906+1185904595x^905+1395520902x^904+2979715775x^903+2565079614x^902+2201284634x^901+3070173047x^900+1269955387x^899+88270703x^898+2211769482x^897+2445891864x^896+2976388446x^895+629386684x^894+9187804x^893+2865764004x^892+2593108942x^891+529507768x^890+337118969x^889+1564871661x^888+1238507920x^887+2061703491x^886+526280491x^885+2547234538x^884+1529493258x^883+2882444001x^882+107989634x^881+1406339250x^880+212271283x^879+3030417531x^878+566518066x^877+217561432x^876+2698383350x^875+733635072x^874+2369407629x^873+2928564793x^872+660022196x^871+2590494565x^870+1654592262x^869+3125621896x^868+1536479399x^867+429232426x^866+475487956x^865+2279282057x^864+2192738535x^863+1820543406x^862+740032625x^861+69618066x^860+1690921633x^859+3214291463x^858+3114628530x^857+1895913997x^856+2759524256x^855+1585728778x^854+3091081183x^853+2269646028x^852+216556539x^851+27326784x^850+2716890312x^849+94130171x^848+741376231x^847+45609698x^846+1044283874x^845+2091401010x^844+871413678x^843+998815532x^842+1140223961x^841+1908154355x^840+2407311427x^839+528264097x^838+1362575789x^837+2483370010x^836+198861864x^835+581247328x^834+2348706503x^833+1889700974x^832+532717217x^831+391085961x^830+2734470688x^829+415635975x^828+2081668660x^827+2079791987x^826+2688218265x^825+3115955577x^824+2103946206x^823+1160122605x^822+2313226365x^821+2687908776x^820+1393611108x^819+996876910x^818+1047702554x^817+383558962x^816+2173645819x^815+1694540834x^814+1799835683x^813+321700806x^812+627853421x^811+1427346271x^810+1680953100x^809+2116899397x^808+1363638744x^807+658878663x^806+2370028596x^805+1289644579x^804+534370513x^803+1568388510x^802+1891160196x^801+2552391356x^800+82625553x^799+306109757x^798+2729337012x^797+1683997148x^796+764309302x^795+1758388039x^794+1932398853x^793+794928409x^792+280235727x^791+2594928200x^790+287336741x^789+216374717x^788+2555051839x^787+568491982x^786+2246869418x^785+1164794368x^784+877969847x^783+2773076460x^782+1362935543x^781+2723061961x^780+2316778740x^779+2347164960x^778+943868620x^777+420332479x^776+117154825x^775+2491455499x^774+3069896264x^773+2392213747x^772+978053679x^771+1967290622x^770+890040346x^769+3181557246x^768+1930588427x^767+2697188859x^766+2788616992x^765+760271132x^764+2511514867x^763+1703015873x^762+2105170243x^761+1296184039x^760+1085185743x^759+2547461772x^758+207796381x^757+2409474437x^756+2825391304x^755+82411146x^754+3174836034x^753+2193521865x^752+1487976792x^751+520932180x^750+2896343391x^749+2613095404x^748+2696026993x^747+1038598999x^746+1321085501x^745+216336727x^744+122032525x^743+2879881037x^742+2814564998x^741+798430091x^740+2969982423x^739+1014590955x^738+1601515766x^737+1911312241x^736+474670607x^735+2768053368x^734+1795287871x^733+2912775689x^732+989352489x^731+860529972x^730+2246322650x^729+1900932982x^728+1935580648x^727+2792973245x^726+2001304512x^725+222941861x^724+1584641077x^723+2729996072x^722+1595078093x^721+684954221x^720+1282574015x^719+90467415x^718+2090982556x^717+653504342x^716+2632182137x^715+2452579786x^714+2497909915x^713+1101298002x^712+1288103768x^711+1549176538x^710+8209440x^709+222590362x^708+3047550067x^707+2376375093x^706+597144904x^705+2156469249x^704+1527933271x^703+947679794x^702+941607767x^701+2045665533x^700+2477507789x^699+3209784617x^698+2388923550x^697+2903939259x^696+2686720182x^695+2960680560x^694+806513345x^693+495019105x^692+2730726882x^691+2323807513x^690+1279380531x^689+2774374207x^688+2127356347x^687+3109362510x^686+2064966723x^685+1093939533x^684+127076966x^683+1033488907x^682+611598959x^681+707571323x^680+2943502694x^679+2783938419x^678+766632097x^677+158902345x^676+2940059140x^675+1036922208x^674+197250298x^673+3022118902x^672+2546551997x^671+537327588x^670+536250863x^669+2792606417x^668+837526976x^667+2369480572x^666+356809676x^665+1884622154x^664+2453406484x^663+2549494899x^662+1120322610x^661+199352840x^660+1835597163x^659+2890386478x^658+1411809803x^657+2417809567x^656+2113079931x^655+707900826x^654+661915046x^653+977862145x^652+264328672x^651+137725564x^650+41758302x^649+1253748229x^648+1349473096x^647+397722861x^646+659625200x^645+230102119x^644+2928209520x^643+2744170408x^642+1467260128x^641+147190116x^640+930158251x^639+1872561314x^638+2117184984x^637+1697697878x^636+2314266354x^635+1041359839x^634+2742195817x^633+466937591x^632+1962760739x^631+2857822752x^630+54554006x^629+1647881264x^628+577603966x^627+2799518187x^626+975084563x^625+2058165272x^624+2224254227x^623+2306255739x^622+205805547x^621+2483353920x^620+1791099131x^619+1363276843x^618+773799447x^617+1173247951x^616+2747894117x^615+2523498221x^614+2217116088x^613+347921116x^612+1918316359x^611+2881233568x^610+279133563x^609+524758410x^608+1181520840x^607+1551613360x^606+477620424x^605+2435936410x^604+2217584817x^603+2330438410x^602+1213446812x^601+2625572843x^600+2865992487x^599+493825897x^598+1166295988x^597+1267929266x^596+3065182177x^595+3118102884x^594+1306179921x^593+3145541388x^592+290289134x^591+2639114329x^590+2005306542x^589+1735495469x^588+1982035059x^587+760245259x^586+487585479x^585+1964611384x^584+1052583610x^583+1459159749x^582+1964662809x^581+3218924436x^580+1629884706x^579+2632718517x^578+748737842x^577+2359103461x^576+2006432280x^575+356967772x^574+2860158175x^573+2452867954x^572+3189869933x^571+2923664805x^570+2274221620x^569+2557679369x^568+2739897125x^567+1190540107x^566+1493557727x^565+251107793x^564+2267315612x^563+1633158663x^562+2021831892x^561+1525165945x^560+3054980540x^559+2775044749x^558+2711284965x^557+2860210808x^556+376392094x^555+869362950x^554+247078866x^553+2374022601x^552+832483154x^551+678225041x^550+3052074996x^549+3049426036x^548+2954487180x^547+872002972x^546+864983311x^545+2804396922x^544+2184558940x^543+1991297704x^542+2996566867x^541+2096678532x^540+3173510784x^539+1300067706x^538+815293809x^537+1381215744x^536+2956196486x^535+262786576x^534+1273715730x^533+1818878984x^532+1565823445x^531+2031243484x^530+761693034x^529+2985522467x^528+2711747228x^527+3107229802x^526+2736056486x^525+1175072713x^524+2664688192x^523+315257852x^522+2212346899x^521+1657758913x^520+825019124x^519+3020223129x^518+1622970442x^517+609770742x^516+371435072x^515+62539169x^514+1409944537x^513+1258547104x^512+440995003x^511+2686068490x^510+2931560795x^509+1894340310x^508+2900101430x^507+3131833739x^506+2239390284x^505+65741330x^504+2953507567x^503+3092877801x^502+114648495x^501+1039172500x^500+2805913423x^499+1677257871x^498+1589921653x^497+728200006x^496+1703406244x^495+2121790392x^494+1797487262x^493+11842201x^492+2983440997x^491+1972540688x^490+1072254576x^489+1514678804x^488+822234371x^487+2756927705x^486+780948365x^485+2671584496x^484+1622945569x^483+1020428411x^482+2724687920x^481+2559088528x^480+1619369403x^479+1587896236x^478+2078391763x^477+2150723676x^476+662718495x^475+2919366936x^474+811676510x^473+1066774936x^472+1059778046x^471+1829533274x^470+2131273233x^469+1042337519x^468+482962207x^467+1447524529x^466+1216850914x^465+1941798834x^464+2724851656x^463+1032457504x^462+3187276567x^461+1324714858x^460+681983493x^459+2531825638x^458+3204989610x^457+2521337320x^456+692395422x^455+957728285x^454+1957923500x^453+954197730x^452+3185096344x^451+2459252250x^450+1549915019x^449+470175196x^448+983117429x^447+2898569137x^446+1667464089x^445+213805557x^444+1390146616x^443+3064938867x^442+1752666182x^441+660615589x^440+1754664911x^439+2398063945x^438+1995701894x^437+264948128x^436+977015910x^435+1508638987x^434+620307652x^433+1615435814x^432+78630504x^431+1090576070x^430+260371966x^429+1695379559x^428+2241302488x^427+1262190501x^426+1002913396x^425+929126682x^424+1456970002x^423+2294784443x^422+831072563x^421+1336698653x^420+2887326202x^419+1555383826x^418+513703708x^417+1322836188x^416+2170650142x^415+2741077093x^414+755038428x^413+57412831x^412+749304405x^411+614461451x^410+2790363067x^409+2797312955x^408+2831209763x^407+1485551233x^406+2108589220x^405+1413675886x^404+1143025281x^403+816887806x^402+441895441x^401+2235781276x^400+2954755837x^399+2588197099x^398+812974443x^397+1698928559x^396+3053831450x^395+1723929169x^394+623101498x^393+496445003x^392+420072220x^391+1811574494x^390+1101225711x^389+1750763787x^388+1682648430x^387+1732887196x^386+2506223963x^385+3000048840x^384+2584324127x^383+1384646851x^382+2935407006x^381+509607639x^380+2166300092x^379+1123654965x^378+65492378x^377+1282212880x^376+2804064286x^375+247056384x^374+811500726x^373+1198142380x^372+1331029949x^371+255582344x^370+2541935940x^369+1293832504x^368+499827755x^367+1840695422x^366+732652696x^365+999518276x^364+1081980598x^363+1081655502x^362+75786438x^361+562331081x^360+592671230x^359+2848852899x^358+3168140116x^357+826684400x^356+2883456022x^355+355058519x^354+2722993226x^353+881161352x^352+2424979833x^351+1177731034x^350+1980458543x^349+686501124x^348+589579337x^347+49112362x^346+989396523x^345+3167680937x^344+534754197x^343+1189385487x^342+1116915745x^341+1692177729x^340+1303803669x^339+2905604867x^338+409726160x^337+2470173850x^336+3069287806x^335+180449040x^334+307791593x^333+2980755328x^332+1118312887x^331+611005488x^330+931596430x^329+1596383662x^328+2538167116x^327+1676688024x^326+2989408359x^325+3162119349x^324+944233698x^323+3194301878x^322+2539617375x^321+2766824293x^320+1202807077x^319+1685646777x^318+3063965433x^317+2596037068x^316+2371816012x^315+622948313x^314+2239821501x^313+1426875338x^312+3217832536x^311+1834011515x^310+1495994237x^309+1017706601x^308+3051326507x^307+2352031366x^306+763635260x^305+39750044x^304+715672209x^303+2506526823x^302+1692939544x^301+928487821x^300+2631372294x^299+2464649135x^298+2966134967x^297+1968444884x^296+2137025103x^295+868375775x^294+1139923625x^293+434478523x^292+1948275627x^291+2726624786x^290+331539791x^289+218481251x^288+2016882203x^287+2758432237x^286+544469175x^285+472265015x^284+852587717x^283+260910966x^282+2106423339x^281+2626819956x^280+2872974443x^279+309805598x^278+170973107x^277+66027808x^276+2730348962x^275+510866626x^274+522623295x^273+100699091x^272+2090432852x^271+1686177862x^270+2269572565x^269+1330527420x^268+2196749555x^267+2308249402x^266+2147766233x^265+1345336858x^264+142916256x^263+835862430x^262+50667708x^261+942108394x^260+1499549763x^259+2542908749x^258+1803664262x^257+2501870219x^256+864111293x^255+2418313340x^254+2511442209x^253+242763921x^252+3150779177x^251+48146535x^250+1813820515x^249+924227828x^248+3007348714x^247+2807015354x^246+976962593x^245+1044382613x^244+529771169x^243+2989702160x^242+1801701111x^241+320589814x^240+2428896297x^239+2037762372x^238+3143200820x^237+1723105519x^236+1600442736x^235+1898240113x^234+2568013509x^233+2624480118x^232+1393522595x^231+2500719698x^230+1264880807x^229+1214677475x^228+497627168x^227+2199000190x^226+1292091241x^225+38861929x^224+2527108842x^223+1873891894x^222+2855462003x^221+807144224x^220+135626526x^219+1706260097x^218+1170690152x^217+612269405x^216+1803738116x^215+2520817139x^214+3107175427x^213+3113314818x^212+2567333935x^211+3085626493x^210+249516349x^209+2709466314x^208+1963695228x^207+1061042366x^206+2080078210x^205+2270138678x^204+2868751764x^203+78865788x^202+643787753x^201+1478764249x^200+2243151467x^199+3191110753x^198+903802700x^197+1331232419x^196+1207164932x^195+2327458734x^194+2129671580x^193+742415550x^192+2964561068x^191+97884125x^190+1824230877x^189+1722817323x^188+2503280895x^187+2124090547x^186+1615724023x^185+493285350x^184+375731485x^183+2148178961x^182+656578420x^181+1653801546x^180+2335087681x^179+897727878x^178+3050631650x^177+1646974018x^176+395227802x^175+1144412800x^174+508378077x^173+130615630x^172+1554426998x^171+374638244x^170+2212173480x^169+756005027x^168+1779052498x^167+358373357x^166+1706423393x^165+172533412x^164+2252801969x^163+117260276x^162+2914389522x^161+3092513419x^160+645489528x^159+2034879930x^158+2391542437x^157+184935291x^156+1166681116x^155+150468624x^154+160320071x^153+1638612899x^152+50273415x^151+2731164469x^150+824939276x^149+364492049x^148+571947498x^147+1226588107x^146+2718765814x^145+1589016621x^144+1693414685x^143+2475406948x^142+1631940054x^141+123534811x^140+1782522465x^139+182260790x^138+2179494669x^137+2592942581x^136+1697454972x^135+2088047218x^134+3014478889x^133+1034853282x^132+1117923160x^131+1955722538x^130+528733527x^129+2837204349x^128+2995975255x^127+1861777816x^126+2792705876x^125+487313609x^124+470449757x^123+2592285469x^122+397063821x^121+2541225496x^120+1518074014x^119+2245263403x^118+154219934x^117+831775195x^116+751582126x^115+2113252744x^114+958875457x^113+557029157x^112+2293667789x^111+99047117x^110+1338869962x^109+400428214x^108+3215371505x^107+913519645x^106+1731089513x^105+2979622703x^104+2077752049x^103+2925393092x^102+688200234x^101+1299958656x^100+618266366x^99+579061426x^98+2052642107x^97+2048627900x^96+766170859x^95+1938571788x^94+1721723827x^93+1113888145x^92+556376745x^91+1296374746x^90+1437888560x^89+2720357387x^88+1441667990x^87+1256074340x^86+838931396x^85+591724270x^84+1072782011x^83+3026588892x^82+2524734261x^81+146797660x^80+1640074068x^79+2421228951x^78+1015674509x^77+2549300422x^76+499818981x^75+952101888x^74+1342945770x^73+2835219226x^72+1320572752x^71+2375492575x^70+2841415077x^69+556100187x^68+828949541x^67+2361011922x^66+1243642511x^65+2426386945x^64+1754936353x^63+34182915x^62+1620407187x^61+300087122x^60+1648019678x^59+1600304898x^58+532864059x^57+2195902030x^56+258529940x^55+2702074881x^54+2801103414x^53+3090072859x^52+918437967x^51+1721365997x^50+2859258693x^49+1721148335x^48+2685956486x^47+2089522169x^46+1975590254x^45+938607722x^44+1004144493x^43+3035365732x^42+2179582210x^41+3017963089x^40+3194237735x^39+2231032939x^38+1050257479x^37+3175776665x^36+589208906x^35+911380974x^34+378381996x^33+1275188540x^32+3180519331x^31+2190297672x^30+2060583277x^29+460775583x^28+2512161506x^27+191770867x^26+1873500852x^25+197991059x^24+2660464273x^23+2425492792x^22+1431944x^21+976804842x^20+2244215829x^19+431564296x^18+277594728x^17+2595074017x^16+1778004047x^15+322688855x^14+1495277389x^13+1810802035x^12+303207458x^11+2521905975x^10+2214743620x^9+1401589658x^8+833738775x^7+2409538067x^6+2052556331x^5+1312214659x^4+490273045x^3+1909520480x^2+324457201x+2718901507";
function assertBytes(expect, actual) {
  assert(expect.length == actual.length);
  for (let i = 0; i < expect.length; i++) {
    assert(expect[i] == actual[i]);
  }
}
describe("polynomial", async function () {
  this.timeout(0);

  it("interpolation test", async () => {
    let p = Polynomial.interpolate([
      [1, 1],
      [5, 4],
    ]);
    let d = p.eval(10);
    assert.equal(p.toString(), "0.75x+0.25");
    assert.equal(d, 7.75);

    Polynomial.setFiniteField(3n * 2n ** 30n + 1n);
    let pf = Polynomial.interpolate([
      [1, 1],
      [5, 4],
    ]);
    let df = pf.eval(10);
    assert.equal(pf.toString(), "805306369x+2415919105");
    assert.equal(df, 805306376n);

    Polynomial.setFiniteField(3n * 2n ** 30n + 1n);
    let pf2 = Polynomial.interpolate([
      [1, 1],
      [3, 2],
      [8, 3],
    ]);
    let df2 = pf2.eval(10);
    assert.equal(pf2.toString(), "1886717777x^2+506192575x+828315122");
    assert.equal(df2, 1288490192n);
  });
});

describe("standard fri", async function () {
  this.timeout(0);

  it("fri test", async () => {
    Polynomial.setFiniteField(3n * 2n ** 30n + 1n);
    const field = galois.createPrimeField(3n * 2n ** 30n + 1n);

    const c = field.add(3221225472n, 10n);
    assert(c == 9n);

    const arr = [1n, 3141592n];
    for (let i = 0; i < 1021; i++) {
      arr.push(field.add(field.mul(arr[i], arr[i]), field.mul(arr[i + 1], arr[i + 1])));
    }

    assert(arr[1022] == 2338775057n);

    const g = pow(field, 5n, 3n * 2n ** 20n);
    // console.log(g);

    const g_arr = [];
    for (let i = 0; i < 1024; i++) {
      g_arr.push(pow(field, g, BigInt(i)));
    }
    // console.log(g_arr.slice(0, 5));

    // Checks that g and G are correct.
    assert(isOrder(field, g, 1024), "g is not of order 1024");
    let b = field.one;
    for (let i = 0; i < 1023; i++) {
      assert(b == g_arr[i], `The ${i}-th place in G is not equal to the ${i}-th power of g.`);

      b = field.mul(b, g);
      let wrongOrder = i + 1;
      assert(b != field.one, `g is of order ${wrongOrder}`);
    }

    assert.equal(field.mul(b, g), field.one, "g is of order > 1024");
    // console.log(arr.length);

    const xs = g_arr.slice(0, g_arr.length - 1);
    console.log("xs: ", xs.length, xs.slice(0, 5));
    const points = xs.map((x, i) => [x, arr[i]]);
    // console.log(points.length, points.slice(0, 5));

    // return;
    // const f = interpolate(field, points);
    // let f = Polynomial.interpolate(points);
    // console.log(f.coeff, f.toString());

    // precomputed
    let f = new Polynomial(PrecomputedPolynomial);
    const v = f.eval(2);

    assert.equal(BigInt(v), 1302089273n);

    // Evaluating on Larger Domain
    // Cosets

    const w = 5n; //generator
    const exp = field.div(field.mul(pow(field, 2, 30), 3n), 8192n);
    const h = pow(field, w, exp);
    const h_array = Array(8192)
      .fill(1n)
      .map((_, i) => pow(field, h, i));
    const eval_domain = h_array.map((x) => field.mul(w, x));
    console.log("eval_domain", eval_domain.slice(0, 5));

    // test cosets
    let field_generator = w;
    let w_inverse = field.inv(field_generator);

    for (let i = 0; i < 8192; i++) {
      // assert_eq!((w_inverse * eval_domain[1]).pow(i) * field_generator, eval_domain[i]);
      assert(field.mul(pow(field, field.mul(w_inverse, eval_domain[1]), BigInt(i)), field_generator) == eval_domain[i]);
    }

    // Evaluate on a coset

    // const G_values = [];
    // for (let i = 0n; i < 1024n; i++) {
    //   G_values.push(pow(field, g, i));
    // }

    // const x_values = G_values.slice(0, G_values.length - 1);
    // const g_points = x_values.map((x, i) => [x, arr[i]]);
    let try_evaluate_real = false;
    if (try_evaluate_real) {
      const real_points = Array(1023)
        .fill(1n)
        .map((_, i) => [pow(field, g, i), arr[i]]);
      let real_f = Polynomial.interpolate(real_points, (j, total) => {
        if (j % 128 == 0) console.log("working on interpolation", j, total);
      });
      let real_f_eval = eval_domain.map((x) => real_f.eval(x));
      assert.equal(real_f_eval[0], 576067152n);
      assert.equal(real_f_eval[3], 2961687211n);
    }

    const ev = eval_domain.map((x) => f.eval(x));
    console.log("ev", ev.slice(0, 5));

    const tree = new MerkleTree(ev, SHA256);
    const root = tree.getRoot().toString("hex");
    // console.log(root);
    assert.equal(root , "d1bf99e9e7854a486206d366274fb979ed2a92b6cd22977564280858f03a77cd");

    // =========================== Part 2 ===========================
    const numer0 = f;
  });
});

function pow(field, base, n) {
  n = BigInt(n);
  let current_pow = BigInt(base);
  let res = 1n;
  while (n > 0n) {
    if (n % 2n !== 0n) {
      res = field.mul(res, current_pow);
    }
    n = n / 2n;
    current_pow = field.mul(current_pow, current_pow);
  }

  return res;
}

function isOrder(field, g, n) {
  if (n < 1) {
    throw new Error("n must be greater than or equal to 1");
  }
  let h = field.one;
  for (let i = 1; i < n; i++) {
    h = field.mul(h, g);
    if (h == field.one) {
      return false;
    }
  }
  h = field.mul(h, g);
  return h == field.one;
}

// https://github.com/feklee/interpolating-polynomial/blob/master/node_main.js
// Neville's algorithm
// too slow, feasible for small number of points (<10)
function interpolate(field, points) {
  let n = points.length - 1,
    p;

  p = function (i, j, x) {
    console.log(i, j, x);
    if (i === j) {
      return points[i][1];
    }

    // return ((points[j][0] - x) * p(i, j - 1, x) +
    //         (x - points[i][0]) * p(i + 1, j, x)) /
    //     (points[j][0] - points[i][0]);
    const xb = BigInt(x);
    const xj = BigInt(points[j][0]);
    const xi = BigInt(points[i][0]);

    const numerator1 = field.mul(field.sub(xj, xb), p(i, j - 1, x));
    const numerator2 = field.mul(field.sub(xb, xi), p(i + 1, j, x));
    const denominator = field.sub(xj, xi);

    return field.div(field.add(numerator1, numerator2), denominator);
  };

  return function (x) {
    if (points.length === 0) {
      return 0;
    }
    return p(0, n, x);
  };
}

function barycentricWeights(points, field) {
  const n = points.length;
  const w = Array(n)
    .fill(1n)
    .map(() => BigInt(1));
  for (let j = 0; j < n; j++) {
    for (let k = 0; k < n; k++) {
      if (j !== k) {
        w[j] = field.div(w[j], field.sub(BigInt(points[j][0]), BigInt(points[k][0])));
      }
    }
  }
  return w;
}

function barycentricInterpolation(points, weights, x, field) {
  const n = points.length;
  let numerator = 0n;
  let denominator = 0n;

  for (let j = 0; j < n; j++) {
    const term = field.div(weights[j], field.sub(BigInt(x), BigInt(points[j][0])));
    numerator = field.add(numerator, field.mul(term, BigInt(points[j][1])));
    denominator = field.add(denominator, term);
  }

  return field.div(numerator, denominator);
}
